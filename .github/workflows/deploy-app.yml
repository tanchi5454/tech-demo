# .github/workflows/deploy-app.yml

name: Deploy Application to GKE

# ワークフローのトリガー設定
on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'k8s/**'
  workflow_dispatch:

# ワークフロー全体で使用する環境変数を定義
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: wiz-gke-cluster
  GKE_REGION: asia-northeast1
  GKE_ZONE: asia-northeast1-a
  REPO_NAME: wiz-repo
  IMAGE_NAME: wiz-app
  
jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    # 1. リポジトリのコードをチェックアウト
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Google Cloudへの認証
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    # 3. gcloud CLIをセットアップ
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    # 4. GKEクラスタの認証情報を取得
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_REGION }}

    # 5. DockerイメージをビルドしてArtifact Registryにプッシュ
    - name: Build and Push Docker image
      run: |
        gcloud auth configure-docker ${{ env.GKE_REGION }}-docker.pkg.dev
        docker build -t ${{ env.GKE_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -f app/Dockerfile ./
        docker push ${{ env.GKE_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    # 6. Secret Managerから機密情報を取得してKubernetes Secretを作成
    - name: Create/Update Kubernetes Secrets
      id: create-secrets
      run: |
        set -x
        echo "::group::Retrieving secrets from Secret Manager"
        MONGO_USER=$(echo -n "$(gcloud secrets versions access latest --secret='db-user')")
        MONGO_PASS=$(echo -n "$(gcloud secrets versions access latest --secret='db-pass')")
        echo "::endgroup::"

        MONGO_HOSTNAME="mongodb-vm"
        
        echo "Constructed MONGODB_URI (hidden password): mongodb://${MONGO_USER}:***@${MONGO_HOSTNAME}:27017/todo_db?authSource=admin"

        kubectl create secret generic wiz-app-secrets \
          --from-literal=MONGODB_URI=${MONGO_URI=mongodb://${MONGO_USER}:${MONGO_PASS}@${MONGO_HOSTNAME}:27017/todo_db?authSource=admin} \
          --from-literal=SECRET_KEY=$(gcloud secrets versions access latest --secret='secret-key') \
          --dry-run=client -o yaml | kubectl apply -f -

    # 7. KubernetesマニフェストをGKEにデプロイ
    - name: Deploy to GKE
      run: |
        FULL_IMAGE_PATH="${{ env.GKE_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "Replacing image placeholder with: $FULL_IMAGE_PATH"
        sed -i "s#image: __IMAGE_PLACEHOLDER__#image: ${FULL_IMAGE_PATH}#g" k8s/02-deployment.yaml
        kubectl apply -f k8s/

        # sed -i "s|image: __IMAGE_PLACEHOLDER__|image: ${FULL_IMAGE_PATH}|g" k8s/02-deployment.yaml
        kubectl apply -f k8s/

    # 8. 実行中のコンテナ内でwizexercise.txtの存在と内容を検証
    - name: Verify wizexercise.txt in running container
      id: verify-pod
      run: |
        echo "Waiting for new pods to be ready..."
        kubectl wait --for=condition=ready pod -l app=wiz-app --timeout=180s
        sleep 5
        POD_NAME=$(kubectl get pods -l app=wiz-app --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
        echo "Verifying content of wizexercise.txt in pod: $POD_NAME"
        kubectl exec $POD_NAME -- cat /app/wizexercise.txt

        echo "Waiting for new pods to be ready..."
        kubectl wait --for=condition=ready pod -l app=wiz-app --timeout=180s || {
            echo "::error::Timeout while waiting for pods to become ready"
            exit 1
            }
            
        sleep 5

        POD_NAME=$(kubectl get pods -l app=wiz-app --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')

        if [ -z "$POD_NAME" ]; then
          echo "::error::No running pod found with label app=wiz-app"
            kubectl get pods -l app=wiz-app
              exit 1
        fi

        echo "Verifying content of wizexercise.txt in pod: $POD_NAME"
        kubectl exec "$POD_NAME" -- cat /app/wizexercise.txt

    # 9. ワークフローが失敗した場合にデバッグ情報を出力
    - name: Debug Pods on Failure
      if: failure()
      run: |
        echo "::error::Workflow failed. Collecting debug information..."
        echo "--- Pods Status ---"
        kubectl get pods -l app=wiz-app -o wide
        POD_NAMES=$(kubectl get pods -l app=wiz-app -o jsonpath='{.items[*].metadata.name}')
        for POD_NAME in $POD_NAMES; do
          echo "--- Describing pod: $POD_NAME ---"
          kubectl describe pod $POD_NAME
          echo "--- Logs from pod: $POD_NAME (previous) ---"
          kubectl logs $POD_NAME --all-containers=true --previous
        done
